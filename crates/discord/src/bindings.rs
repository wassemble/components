// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[derive(Clone)]
pub struct Message {
    pub content: _rt::String,
    pub channel_id: _rt::String,
    pub guild_id: Option<_rt::String>,
}
impl ::core::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Message")
            .field("content", &self.content)
            .field("channel-id", &self.channel_id)
            .field("guild-id", &self.guild_id)
            .finish()
    }
}
#[derive(Clone)]
pub struct Webhook {
    pub id: _rt::String,
    pub token: _rt::String,
    pub url: _rt::String,
}
impl ::core::fmt::Debug for Webhook {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Webhook")
            .field("id", &self.id)
            .field("token", &self.token)
            .field("url", &self.url)
            .finish()
    }
}
#[derive(Clone)]
pub struct User {
    pub id: _rt::String,
    pub username: _rt::String,
    pub discriminator: _rt::String,
    pub avatar: Option<_rt::String>,
}
impl ::core::fmt::Debug for User {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("User")
            .field("id", &self.id)
            .field("username", &self.username)
            .field("discriminator", &self.discriminator)
            .field("avatar", &self.avatar)
            .finish()
    }
}
#[derive(Clone)]
pub struct Channel {
    pub id: _rt::String,
    pub name: _rt::String,
    pub ty: u32,
    pub guild_id: Option<_rt::String>,
}
impl ::core::fmt::Debug for Channel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Channel")
            .field("id", &self.id)
            .field("name", &self.name)
            .field("ty", &self.ty)
            .field("guild-id", &self.guild_id)
            .finish()
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_webhook_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let result3 = T::create_webhook(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
    );
    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
    let Webhook {
        id: id5,
        token: token5,
        url: url5,
    } = result3;
    let vec6 = (id5.into_bytes()).into_boxed_slice();
    let ptr6 = vec6.as_ptr().cast::<u8>();
    let len6 = vec6.len();
    ::core::mem::forget(vec6);
    *ptr4
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len6;
    *ptr4.add(0).cast::<*mut u8>() = ptr6.cast_mut();
    let vec7 = (token5.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr4
        .add(3 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len7;
    *ptr4
        .add(2 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>() = ptr7.cast_mut();
    let vec8 = (url5.into_bytes()).into_boxed_slice();
    let ptr8 = vec8.as_ptr().cast::<u8>();
    let len8 = vec8.len();
    ::core::mem::forget(vec8);
    *ptr4
        .add(5 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len8;
    *ptr4
        .add(4 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>() = ptr8.cast_mut();
    ptr4
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_create_webhook<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0
        .add(2 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>();
    let l3 = *arg0
        .add(3 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
    let l4 = *arg0
        .add(4 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>();
    let l5 = *arg0
        .add(5 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l4, l5, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_delete_webhook_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
) -> i32 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let result3 = T::delete_webhook(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
    );
    match result3 {
        true => 1,
        false => 0,
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_delete_message_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
) -> i32 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let result3 = T::delete_message(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
    );
    match result3 {
        true => 1,
        false => 0,
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_edit_message_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
    arg6: *mut u8,
    arg7: usize,
) -> i32 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let len3 = arg7;
    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
    let result4 = T::edit_message(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
        _rt::string_lift(bytes3),
    );
    match result4 {
        true => 1,
        false => 0,
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_channel_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let result2 = T::get_channel(_rt::string_lift(bytes0), _rt::string_lift(bytes1));
    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
    let Channel {
        id: id4,
        name: name4,
        ty: ty4,
        guild_id: guild_id4,
    } = result2;
    let vec5 = (id4.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *ptr3
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len5;
    *ptr3.add(0).cast::<*mut u8>() = ptr5.cast_mut();
    let vec6 = (name4.into_bytes()).into_boxed_slice();
    let ptr6 = vec6.as_ptr().cast::<u8>();
    let len6 = vec6.len();
    ::core::mem::forget(vec6);
    *ptr3
        .add(3 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len6;
    *ptr3
        .add(2 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>() = ptr6.cast_mut();
    *ptr3
        .add(4 * ::core::mem::size_of::<*const u8>())
        .cast::<i32>() = _rt::as_i32(ty4);
    match guild_id4 {
        Some(e) => {
            *ptr3
                .add(5 * ::core::mem::size_of::<*const u8>())
                .cast::<u8>() = (1i32) as u8;
            let vec7 = (e.into_bytes()).into_boxed_slice();
            let ptr7 = vec7.as_ptr().cast::<u8>();
            let len7 = vec7.len();
            ::core::mem::forget(vec7);
            *ptr3
                .add(7 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len7;
            *ptr3
                .add(6 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr7.cast_mut();
        }
        None => {
            *ptr3
                .add(5 * ::core::mem::size_of::<*const u8>())
                .cast::<u8>() = (0i32) as u8;
        }
    };
    ptr3
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_channel<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0
        .add(2 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>();
    let l3 = *arg0
        .add(3 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
    let l4 = i32::from(
        *arg0
            .add(5 * ::core::mem::size_of::<*const u8>())
            .cast::<u8>(),
    );
    match l4 {
        0 => {}
        _ => {
            let l5 = *arg0
                .add(6 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l6 = *arg0
                .add(7 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l5, l6, 1);
        }
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_user_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let result2 = T::get_user(_rt::string_lift(bytes0), _rt::string_lift(bytes1));
    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
    let User {
        id: id4,
        username: username4,
        discriminator: discriminator4,
        avatar: avatar4,
    } = result2;
    let vec5 = (id4.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *ptr3
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len5;
    *ptr3.add(0).cast::<*mut u8>() = ptr5.cast_mut();
    let vec6 = (username4.into_bytes()).into_boxed_slice();
    let ptr6 = vec6.as_ptr().cast::<u8>();
    let len6 = vec6.len();
    ::core::mem::forget(vec6);
    *ptr3
        .add(3 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len6;
    *ptr3
        .add(2 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>() = ptr6.cast_mut();
    let vec7 = (discriminator4.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr3
        .add(5 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len7;
    *ptr3
        .add(4 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>() = ptr7.cast_mut();
    match avatar4 {
        Some(e) => {
            *ptr3
                .add(6 * ::core::mem::size_of::<*const u8>())
                .cast::<u8>() = (1i32) as u8;
            let vec8 = (e.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *ptr3
                .add(8 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>() = len8;
            *ptr3
                .add(7 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>() = ptr8.cast_mut();
        }
        None => {
            *ptr3
                .add(6 * ::core::mem::size_of::<*const u8>())
                .cast::<u8>() = (0i32) as u8;
        }
    };
    ptr3
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_user<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0
        .add(2 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>();
    let l3 = *arg0
        .add(3 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
    let l4 = *arg0
        .add(4 * ::core::mem::size_of::<*const u8>())
        .cast::<*mut u8>();
    let l5 = *arg0
        .add(5 * ::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l4, l5, 1);
    let l6 = i32::from(
        *arg0
            .add(6 * ::core::mem::size_of::<*const u8>())
            .cast::<u8>(),
    );
    match l6 {
        0 => {}
        _ => {
            let l7 = *arg0
                .add(7 * ::core::mem::size_of::<*const u8>())
                .cast::<*mut u8>();
            let l8 = *arg0
                .add(8 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            _rt::cabi_dealloc(l7, l8, 1);
        }
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_send_message_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
    arg6: i32,
    arg7: *mut u8,
    arg8: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let result4 = T::send_message(
        _rt::string_lift(bytes0),
        Message {
            content: _rt::string_lift(bytes1),
            channel_id: _rt::string_lift(bytes2),
            guild_id: match arg6 {
                0 => None,
                1 => {
                    let e = {
                        let len3 = arg8;
                        let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    };
                    Some(e)
                }
                _ => _rt::invalid_enum_discriminant(),
            },
        },
    );
    let ptr5 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec6 = (result4.into_bytes()).into_boxed_slice();
    let ptr6 = vec6.as_ptr().cast::<u8>();
    let len6 = vec6.len();
    ::core::mem::forget(vec6);
    *ptr5
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len6;
    *ptr5.add(0).cast::<*mut u8>() = ptr6.cast_mut();
    ptr5
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_send_message<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_send_webhook_message_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
    arg6: *mut u8,
    arg7: usize,
    arg8: *mut u8,
    arg9: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let len3 = arg7;
    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
    let len4 = arg9;
    let bytes4 = _rt::Vec::from_raw_parts(arg8.cast(), len4, len4);
    let result5 = T::send_webhook_message(
        _rt::string_lift(bytes0),
        Webhook {
            id: _rt::string_lift(bytes1),
            token: _rt::string_lift(bytes2),
            url: _rt::string_lift(bytes3),
        },
        _rt::string_lift(bytes4),
    );
    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec7 = (result5.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr6
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len7;
    *ptr6.add(0).cast::<*mut u8>() = ptr7.cast_mut();
    ptr6
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_send_webhook_message<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
    fn create_webhook(token: _rt::String, channel_id: _rt::String, name: _rt::String) -> Webhook;
    fn delete_webhook(
        token: _rt::String,
        webhook_id: _rt::String,
        webhook_token: _rt::String,
    ) -> bool;
    fn delete_message(token: _rt::String, channel_id: _rt::String, message_id: _rt::String)
    -> bool;
    fn edit_message(
        token: _rt::String,
        channel_id: _rt::String,
        message_id: _rt::String,
        content: _rt::String,
    ) -> bool;
    fn get_channel(token: _rt::String, channel_id: _rt::String) -> Channel;
    fn get_user(token: _rt::String, user_id: _rt::String) -> User;
    fn send_message(token: _rt::String, message: Message) -> _rt::String;
    fn send_webhook_message(
        token: _rt::String,
        webhook: Webhook,
        content: _rt::String,
    ) -> _rt::String;
}
#[doc(hidden)]
macro_rules! __export_world_discord_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "create-webhook")] unsafe extern "C" fn
        export_create_webhook(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 :
        usize, arg4 : * mut u8, arg5 : usize,) -> * mut u8 { unsafe {
        $($path_to_types)*:: _export_create_webhook_cabi::<$ty > (arg0, arg1, arg2, arg3,
        arg4, arg5) } } #[unsafe (export_name = "cabi_post_create-webhook")] unsafe
        extern "C" fn _post_return_create_webhook(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_create_webhook::<$ty > (arg0) } } #[unsafe
        (export_name = "delete-webhook")] unsafe extern "C" fn export_delete_webhook(arg0
        : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 :
        usize,) -> i32 { unsafe { $($path_to_types)*:: _export_delete_webhook_cabi::<$ty
        > (arg0, arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name =
        "delete-message")] unsafe extern "C" fn export_delete_message(arg0 : * mut u8,
        arg1 : usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,) ->
        i32 { unsafe { $($path_to_types)*:: _export_delete_message_cabi::<$ty > (arg0,
        arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name = "edit-message")] unsafe
        extern "C" fn export_edit_message(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8,
        arg3 : usize, arg4 : * mut u8, arg5 : usize, arg6 : * mut u8, arg7 : usize,) ->
        i32 { unsafe { $($path_to_types)*:: _export_edit_message_cabi::<$ty > (arg0,
        arg1, arg2, arg3, arg4, arg5, arg6, arg7) } } #[unsafe (export_name =
        "get-channel")] unsafe extern "C" fn export_get_channel(arg0 : * mut u8, arg1 :
        usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 { unsafe {
        $($path_to_types)*:: _export_get_channel_cabi::<$ty > (arg0, arg1, arg2, arg3) }
        } #[unsafe (export_name = "cabi_post_get-channel")] unsafe extern "C" fn
        _post_return_get_channel(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_get_channel::<$ty > (arg0) } } #[unsafe (export_name = "get-user")]
        unsafe extern "C" fn export_get_user(arg0 : * mut u8, arg1 : usize, arg2 : * mut
        u8, arg3 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_get_user_cabi::<$ty > (arg0, arg1, arg2, arg3) } } #[unsafe (export_name
        = "cabi_post_get-user")] unsafe extern "C" fn _post_return_get_user(arg0 : * mut
        u8,) { unsafe { $($path_to_types)*:: __post_return_get_user::<$ty > (arg0) } }
        #[unsafe (export_name = "send-message")] unsafe extern "C" fn
        export_send_message(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 : usize,
        arg4 : * mut u8, arg5 : usize, arg6 : i32, arg7 : * mut u8, arg8 : usize,) -> *
        mut u8 { unsafe { $($path_to_types)*:: _export_send_message_cabi::<$ty > (arg0,
        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) } } #[unsafe (export_name =
        "cabi_post_send-message")] unsafe extern "C" fn _post_return_send_message(arg0 :
        * mut u8,) { unsafe { $($path_to_types)*:: __post_return_send_message::<$ty >
        (arg0) } } #[unsafe (export_name = "send-webhook-message")] unsafe extern "C" fn
        export_send_webhook_message(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3
        : usize, arg4 : * mut u8, arg5 : usize, arg6 : * mut u8, arg7 : usize, arg8 : *
        mut u8, arg9 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_send_webhook_message_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
        arg6, arg7, arg8, arg9) } } #[unsafe (export_name =
        "cabi_post_send-webhook-message")] unsafe extern "C" fn
        _post_return_send_webhook_message(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_send_webhook_message::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_discord_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 9 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea =
    _RetArea([::core::mem::MaybeUninit::uninit(); 9 * ::core::mem::size_of::<*const u8>()]);
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_discord_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_discord_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_discord_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:wassemble:discord@0.1.0:discord:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 731] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdd\x04\x01A\x02\x01\
A\x19\x01ks\x01r\x03\x07contents\x0achannel-ids\x08guild-id\0\x03\0\x07message\x03\
\0\x01\x01r\x03\x02ids\x05tokens\x03urls\x03\0\x07webhook\x03\0\x03\x01r\x04\x02\
ids\x08usernames\x0ddiscriminators\x06avatar\0\x03\0\x04user\x03\0\x05\x01r\x04\x02\
ids\x04names\x02tyy\x08guild-id\0\x03\0\x07channel\x03\0\x07\x01@\x03\x05tokens\x0a\
channel-ids\x04names\0\x04\x04\0\x0ecreate-webhook\x01\x09\x01@\x03\x05tokens\x0a\
webhook-ids\x0dwebhook-tokens\0\x7f\x04\0\x0edelete-webhook\x01\x0a\x01@\x03\x05\
tokens\x0achannel-ids\x0amessage-ids\0\x7f\x04\0\x0edelete-message\x01\x0b\x01@\x04\
\x05tokens\x0achannel-ids\x0amessage-ids\x07contents\0\x7f\x04\0\x0cedit-message\
\x01\x0c\x01@\x02\x05tokens\x0achannel-ids\0\x08\x04\0\x0bget-channel\x01\x0d\x01\
@\x02\x05tokens\x07user-ids\0\x06\x04\0\x08get-user\x01\x0e\x01@\x02\x05tokens\x07\
message\x02\0s\x04\0\x0csend-message\x01\x0f\x01@\x03\x05tokens\x07webhook\x04\x07\
contents\0s\x04\0\x14send-webhook-message\x01\x10\x04\0\x1fwassemble:discord/dis\
cord@0.1.0\x04\0\x0b\x0d\x01\0\x07discord\x03\0\0\0G\x09producers\x01\x0cprocess\
ed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
