// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type Issue = wassemble::github::types::Issue;
pub type Repository = wassemble::github::types::Repository;
pub type User = wassemble::github::types::User;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_issue_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
    arg6: *mut u8,
    arg7: usize,
    arg8: *mut u8,
    arg9: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let len3 = arg7;
    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
    let len4 = arg9;
    let bytes4 = _rt::Vec::from_raw_parts(arg8.cast(), len4, len4);
    let result5 = T::create_issue(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
        _rt::string_lift(bytes3),
        _rt::string_lift(bytes4),
    );
    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
    let wassemble::github::types::Issue {
        body: body7,
        number: number7,
        title: title7,
    } = result5;
    let vec8 = (body7.into_bytes()).into_boxed_slice();
    let ptr8 = vec8.as_ptr().cast::<u8>();
    let len8 = vec8.len();
    ::core::mem::forget(vec8);
    *ptr6.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
    *ptr6.add(0).cast::<*mut u8>() = ptr8.cast_mut();
    *ptr6.add(2 * ::core::mem::size_of::<*const u8>()).cast::<i32>() = _rt::as_i32(
        number7,
    );
    let vec9 = (title7.into_bytes()).into_boxed_slice();
    let ptr9 = vec9.as_ptr().cast::<u8>();
    let len9 = vec9.len();
    ::core::mem::forget(vec9);
    *ptr6.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
    *ptr6.add(3 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr9
        .cast_mut();
    ptr6
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_create_issue<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l3 = *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_repository_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let result3 = T::create_repository(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
    );
    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
    let wassemble::github::types::Repository {
        name: name5,
        owner: owner5,
        description: description5,
    } = result3;
    let vec6 = (name5.into_bytes()).into_boxed_slice();
    let ptr6 = vec6.as_ptr().cast::<u8>();
    let len6 = vec6.len();
    ::core::mem::forget(vec6);
    *ptr4.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
    *ptr4.add(0).cast::<*mut u8>() = ptr6.cast_mut();
    let vec7 = (owner5.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr4.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
    *ptr4.add(2 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7
        .cast_mut();
    let vec8 = (description5.into_bytes()).into_boxed_slice();
    let ptr8 = vec8.as_ptr().cast::<u8>();
    let len8 = vec8.len();
    ::core::mem::forget(vec8);
    *ptr4.add(5 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
    *ptr4.add(4 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr8
        .cast_mut();
    ptr4
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_create_repository<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l3 = *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
    let l4 = *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l5 = *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l4, l5, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_delete_repository_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
) -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let result3 = T::delete_repository(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
    );
    match result3 {
        true => 1,
        false => 0,
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_user_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::get_user(_rt::string_lift(bytes0));
    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
    let wassemble::github::types::User {
        login: login3,
        id: id3,
        avatar_url: avatar_url3,
    } = result1;
    let vec4 = (login3.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr().cast::<u8>();
    let len4 = vec4.len();
    ::core::mem::forget(vec4);
    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
    *ptr2.add(0).cast::<*mut u8>() = ptr4.cast_mut();
    *ptr2.add(2 * ::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(id3);
    let vec5 = (avatar_url3.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *ptr2.add(8 + 3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
    *ptr2.add(8 + 2 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5
        .cast_mut();
    ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_user<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0.add(8 + 2 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l3 = *arg0.add(8 + 3 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_update_issue_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
    arg4: *mut u8,
    arg5: usize,
    arg6: i32,
    arg7: *mut u8,
    arg8: usize,
    arg9: *mut u8,
    arg10: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let len2 = arg5;
    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
    let len3 = arg8;
    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
    let len4 = arg10;
    let bytes4 = _rt::Vec::from_raw_parts(arg9.cast(), len4, len4);
    let result5 = T::update_issue(
        _rt::string_lift(bytes0),
        _rt::string_lift(bytes1),
        _rt::string_lift(bytes2),
        arg6 as u32,
        _rt::string_lift(bytes3),
        _rt::string_lift(bytes4),
    );
    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
    let wassemble::github::types::Issue {
        body: body7,
        number: number7,
        title: title7,
    } = result5;
    let vec8 = (body7.into_bytes()).into_boxed_slice();
    let ptr8 = vec8.as_ptr().cast::<u8>();
    let len8 = vec8.len();
    ::core::mem::forget(vec8);
    *ptr6.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
    *ptr6.add(0).cast::<*mut u8>() = ptr8.cast_mut();
    *ptr6.add(2 * ::core::mem::size_of::<*const u8>()).cast::<i32>() = _rt::as_i32(
        number7,
    );
    let vec9 = (title7.into_bytes()).into_boxed_slice();
    let ptr9 = vec9.as_ptr().cast::<u8>();
    let len9 = vec9.len();
    ::core::mem::forget(vec9);
    *ptr6.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
    *ptr6.add(3 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr9
        .cast_mut();
    ptr6
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_update_issue<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
    let l2 = *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l3 = *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l2, l3, 1);
}
pub trait Guest {
    fn create_issue(
        token: _rt::String,
        owner: _rt::String,
        repo: _rt::String,
        title: _rt::String,
        body: _rt::String,
    ) -> Issue;
    fn create_repository(
        token: _rt::String,
        name: _rt::String,
        description: _rt::String,
    ) -> Repository;
    fn delete_repository(
        token: _rt::String,
        owner: _rt::String,
        repo: _rt::String,
    ) -> bool;
    fn get_user(token: _rt::String) -> User;
    fn update_issue(
        token: _rt::String,
        owner: _rt::String,
        repo: _rt::String,
        number: u32,
        title: _rt::String,
        body: _rt::String,
    ) -> Issue;
}
#[doc(hidden)]
macro_rules! __export_world_github_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "create-issue")] unsafe extern "C" fn
        export_create_issue(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 : usize,
        arg4 : * mut u8, arg5 : usize, arg6 : * mut u8, arg7 : usize, arg8 : * mut u8,
        arg9 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_create_issue_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5, arg6,
        arg7, arg8, arg9) } } #[unsafe (export_name = "cabi_post_create-issue")] unsafe
        extern "C" fn _post_return_create_issue(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_create_issue::<$ty > (arg0) } } #[unsafe
        (export_name = "create-repository")] unsafe extern "C" fn
        export_create_repository(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 :
        usize, arg4 : * mut u8, arg5 : usize,) -> * mut u8 { unsafe {
        $($path_to_types)*:: _export_create_repository_cabi::<$ty > (arg0, arg1, arg2,
        arg3, arg4, arg5) } } #[unsafe (export_name = "cabi_post_create-repository")]
        unsafe extern "C" fn _post_return_create_repository(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_create_repository::<$ty > (arg0) } } #[unsafe
        (export_name = "delete-repository")] unsafe extern "C" fn
        export_delete_repository(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 :
        usize, arg4 : * mut u8, arg5 : usize,) -> i32 { unsafe { $($path_to_types)*::
        _export_delete_repository_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5) } }
        #[unsafe (export_name = "get-user")] unsafe extern "C" fn export_get_user(arg0 :
        * mut u8, arg1 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_get_user_cabi::<$ty > (arg0, arg1) } } #[unsafe (export_name =
        "cabi_post_get-user")] unsafe extern "C" fn _post_return_get_user(arg0 : * mut
        u8,) { unsafe { $($path_to_types)*:: __post_return_get_user::<$ty > (arg0) } }
        #[unsafe (export_name = "update-issue")] unsafe extern "C" fn
        export_update_issue(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 : usize,
        arg4 : * mut u8, arg5 : usize, arg6 : i32, arg7 : * mut u8, arg8 : usize, arg9 :
        * mut u8, arg10 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_update_issue_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5, arg6,
        arg7, arg8, arg9, arg10) } } #[unsafe (export_name = "cabi_post_update-issue")]
        unsafe extern "C" fn _post_return_update_issue(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_update_issue::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_github_cabi;
#[repr(align(8))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 6 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 6 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wassemble {
    pub mod github {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Issue {
                pub body: _rt::String,
                pub number: u32,
                pub title: _rt::String,
            }
            impl ::core::fmt::Debug for Issue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Issue")
                        .field("body", &self.body)
                        .field("number", &self.number)
                        .field("title", &self.title)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Repository {
                pub name: _rt::String,
                pub owner: _rt::String,
                pub description: _rt::String,
            }
            impl ::core::fmt::Debug for Repository {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Repository")
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .field("description", &self.description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct User {
                pub login: _rt::String,
                pub id: u64,
                pub avatar_url: _rt::String,
            }
            impl ::core::fmt::Debug for User {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("User")
                        .field("login", &self.login)
                        .field("id", &self.id)
                        .field("avatar-url", &self.avatar_url)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_github_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_github_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_github_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wassemble:github@0.1.0:github:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 631] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfa\x03\x01A\x02\x01\
A\x12\x01B\x06\x01r\x03\x04bodys\x06numbery\x05titles\x04\0\x05issue\x03\0\0\x01\
r\x03\x04names\x05owners\x0bdescriptions\x04\0\x0arepository\x03\0\x02\x01r\x03\x05\
logins\x02idw\x0aavatar-urls\x04\0\x04user\x03\0\x04\x03\0\x1cwassemble:github/t\
ypes@0.1.0\x05\0\x02\x03\0\0\x05issue\x03\0\x05issue\x03\0\x01\x02\x03\0\0\x0are\
pository\x03\0\x0arepository\x03\0\x03\x02\x03\0\0\x04user\x03\0\x04user\x03\0\x05\
\x01@\x05\x05tokens\x05owners\x04repos\x05titles\x04bodys\0\x02\x04\0\x0ccreate-\
issue\x01\x07\x01@\x03\x05tokens\x04names\x0bdescriptions\0\x04\x04\0\x11create-\
repository\x01\x08\x01@\x03\x05tokens\x05owners\x04repos\0\x7f\x04\0\x11delete-r\
epository\x01\x09\x01@\x01\x05tokens\0\x06\x04\0\x08get-user\x01\x0a\x01@\x06\x05\
tokens\x05owners\x04repos\x06numbery\x05titles\x04bodys\0\x02\x04\0\x0cupdate-is\
sue\x01\x0b\x04\0\x1dwassemble:github/github@0.1.0\x04\0\x0b\x0c\x01\0\x06github\
\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10\
wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
